[["index.html", "Best Practices in Reproducible Coding Chapter 1 Course Information", " Best Practices in Reproducible Coding RDM Support, Utrecht University 2021-02-21 Chapter 1 Course Information Welcome to the course on Best Practices in Writing Reproducible Code! Ensuring your research is reproducible can be a difficult task. Scripting your analysis is a start, but this in and of itself is no guarantee that you, or someone else, can faithfully repeat your work at a later stage. In this workshop, we will help you not only to make your work reproducible, but also to increase the efficiency of your workflow. We do this by teaching you a few good programming habits: how to set up a good project structure, how to code and comment well, and how to document your code so that it can be used by others. We will furthermore introduce you to Git and GitHub, which are essential tools in managing and publishing code. Reproducibility requires extra effort, but we will focus on teaching you skills that will save you much more time in the long run than they cost to implement. "],["2-welcome-introduction.html", "Chapter 2 Welcome &amp; Introduction", " Chapter 2 Welcome &amp; Introduction knitr::include_url(&quot;../slides/slides_introduction.html&quot;) "],["3-project-management.html", "Chapter 3 Project Management", " Chapter 3 Project Management This section covers the following topics: * Setting up a folder structure * using git for version control * publishing your project on github * Choosing a license Time for some hands-on practice! We have 3 short videos and accompanying exercises for you to go through one by one. Watch the video first, then apply the exercises to your own project. Use the slides linked above to follow links discussed in the video. Be sure to ask for help when you need it! "],["3-1-project-setup.html", "3.1 Project setup", " 3.1 Project setup 3.1.1 Video vembedr::embed_url(&quot;https://vimeo.com/462773031&quot;) 3.1.2 Slides knitr::include_url(&quot;../slides/slides_project-setup.html#3&quot;) 3.1.3 Exercises NB: You can check the slides for more detail. - Use cookiecutter to install a project structure in your system, following the video or these slides. - If you have trouble with cookiecutter: use the instructions on this slide instead. - Take a look at the folder and files within it, to see where your answers to cookiecutter ended up! - Place your project files in the right folder. - Adjust paths in your code, and be sure to use relative paths! - Does your code run in the new folder structure? "],["3-2-version-control.html", "3.2 Version control", " 3.2 Version control 3.2.1 Video vembedr::embed_url(&quot;https://vimeo.com/463264170&quot;) 3.2.2 Slides knitr::include_url(&quot;../slides/slides_project-setup.html#15&quot;) 3.2.3 Exercise Follow the steps in the video (or on these slides) to turn your folder into a git repository Make a remote version of your project on GitHub! Please note: are there (temporary) files you do not wish to track? Add them to the .gitignore file. Consider a .gitignore template for your language: examples on this github repo. Can you use Git and push to Github from your IDE? Experiment with editing and committing on github itself. You can then download your code to your local repository using git pull. Optional: What happens if you edit the same file online and locally, and try to push/pull? (Hint: this often causes a merge conflict, which is no fun to experience. Going through it today means we can assist you if necessary!) "],["3-3-publication-licensing.html", "3.3 Publication &amp; licensing", " 3.3 Publication &amp; licensing 3.3.1 Video vembedr::embed_url(&quot;https://vimeo.com/463659936&quot;) 3.3.2 Slides knitr::include_url(&quot;../slides/slides_project-setup.html#9&quot;) 3.3.3 Exercise Check the license in your project Take a look at other license options via choosealicense.com. Do you want to change your license? Go into your Github and change the LICENSE.md file. Dont forget to pull your remote changes! "],["4-code-quality.html", "Chapter 4 Code Quality", " Chapter 4 Code Quality Lets start making our code readable and reusable! This section covers the following topics: code readability reusable code defensive programming Like the previous chapter, we have 3 short videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Note: these exercises get you to work on your code in detail. Depending on how many issues you discover, it may take some time to refactor your code. Today, focus on identifying issues, and mark them with #TODO or equivalent, so you can find them later. We recommend spending a maximum of 20 minutes on each exercise. However, if you have time, do get started with refactoring your code! While code refactoring can be a time consuming exercise, it is also a great way to learn from your past mistakes, up your coding game, and significantly improve your code at the same time. Tip! Use #TODO or //TODO (depending on your comment marker) to easily find your tasks later on. Many IDEs extract these into a task list! The slides are linked below for reference, and be sure to ask for help when you need it! "],["4-1-readability.html", "4.1 Readability", " 4.1 Readability 4.1.1 Video vembedr::embed_url(&quot;https://vimeo.com/463572640&quot;) 4.1.2 Slides knitr::include_url(&quot;../slides/slides_code-quality.html#3&quot;) 4.1.3 Exercise Use a linter to run through your code and identify style issues. Edit your code to improve the style compatibility, based on the feedback from your linter. If you work with Python, consider applying autopep8 to automatically fix linting issues. For the R users: a course participant found styler, which may do the same for R! If you find code that is hard to read, or variable names that need adjusting, make a note to work on it. (Again, use #TODO or another consistent label!) "],["4-2-reusability.html", "4.2 Reusability", " 4.2 Reusability 4.2.1 Video vembedr::embed_url(&quot;https://vimeo.com/463647105&quot;) 4.2.2 Slides knitr::include_url(&quot;../slides/slides_code-quality.html#12&quot;) 4.2.3 Exercise Visualize your code. - Use yellow for scripted code, purple for structured code (for-loops, functions, etc.), and green for comments - Use any tool that works for you (powerpoint, word, paint, or good old pencils and paper) - During this exercise, try to identify yellow parts that can be structured and turned into (a) function(s). Label them, or rewrite them if you have time. - Make a screenshot or picture of your visualization, and share it on Teams! "],["4-3-robustness.html", "4.3 Robustness", " 4.3 Robustness 4.3.1 Video vembedr::embed_url(&quot;https://vimeo.com/463647105&quot;) 4.3.2 Slides knitr::include_url(&quot;../slides/slides_code-quality.html#21&quot;) 4.3.3 Exercise Identify assumptions in your code What assumptions/expectations exist on your data or (user) input? What assumptions/expectations exist on the input of (a) function(s)? Based on the assumptions/expectations you were able to identify, work on increasing the robustness of your code. Choose one: - Make the input/data assumptions explicit - Option 1: Explicitly state assumptions on data or input in your README.md. - Option 2: Write a piece of code that tests the validity of data/input, and reports an error if the expectations are not met. - Test the input for a function. Modify the code inside your function to: - check the value of the arguments passed to your function using if/else statements; - raise an error in case an argument is out of the range of acceptable values. "],["5-documentation.html", "Chapter 5 Documentation", " Chapter 5 Documentation Time for some documentation around your code! The following topics are covered: * commenting code and functions (docstrings) * writing a README file As usual, we have short videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Use the slides linked above for reference, and be sure to ask for help when you need it! "],["5-1-comments-and-docstrings.html", "5.1 Comments and docstrings", " 5.1 Comments and docstrings 5.1.1 Video vembedr::embed_url(&quot;https://vimeo.com/463992354&quot;) 5.1.2 Slides knitr::include_url(&quot;../slides/slides_documentation.html#4&quot;) 5.1.3 Exercise Add a docstring to a function, preferably the last function you worked on (so its fresh in your memory). Keep in mind: what does my user need to know when they are working with this function? Grab a limited chunk of code to work on, and look at the existing comments. Can you replace a how comment with a why comment? Think: what is the purpose of this code? Rather than: this is how this code works. Are there elements in your chunk that are currently without comments that would benefit from clarification? Try to comment on the thought behind the code rather than simply translating its process in English. Can you delete superfluous comments or zombie code? "],["5-2-the-readme-page.html", "5.2 The README page", " 5.2 The README page 5.2.1 Video vembedr::embed_url(&quot;https://vimeo.com/464027978&quot;) 5.2.2 Slides knitr::include_url(&quot;../slides/slides_documentation.html#16&quot;) 5.2.3 Exercise Edit your README file. Take your time. This is important! Make sure to include the following information: - What does your project do? - How does the user access your project? (E.g. download, or clone with git clone) - How does the user call the main script(s) that should be executed? - And perhaps any other elements you are inspired to add (check out the examples!) Do you want to truly understand the importance of decent installation information? Read this experience by Elisabeth Bik, trying to install image forensics software. Look at the README of the software, and see what you can learn. NB: We will have another chance to take a look at dependencies and prerequisites, but if you have opportunity to add these here: please do! "],["6-accessibility-reproducibility.html", "Chapter 6 Accessibility &amp; Reproducibility", " Chapter 6 Accessibility &amp; Reproducibility Last but not least, lets make our code accessible for others! The following topics are covered: * obtaining a doi and ensuring accessibility * dealing with requirements and dependencies Here are your last videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Use the slides linked above for reference, and be sure to ask for help when you need it! "],["6-1-dependencies.html", "6.1 Dependencies", " 6.1 Dependencies 6.1.1 Video vembedr::embed_url(&quot;https://vimeo.com/464028630&quot;) 6.1.2 Slides knitr::include_url(&quot;../slides/slides_reproducibility.html#3&quot;) 6.1.3 Exercise Address dependencies and language versions in your README. - What version of your coding language is required? - Which packages does a user need to install before running your project? What versions? - Can you provide their installation instructions? "],["6-2-binder.html", "6.2 Binder", " 6.2 Binder 6.2.1 Video vembedr::embed_url(&quot;https://vimeo.com/464010497&quot;) 6.2.2 Exercise (optional) For R Generate a file called runtime.txt, either in the root of your project, or in a (hidden) folder called .binder/. Write in the file: r-2020-10-02  or specify the R version with r-3.6-2020-10-02. Write a file called install.R, in .binder/ or in root, and use it to write install code for your packages, e.g.: install.packages(&quot;ggplot2&quot;) install.packages(&quot;dplyr&quot;) Binderise your project by following the instructions via mybinder.org For Python Binder automatically loads Python 3.6. Add dependencies to your binder in the requirements.txt file like this: numpy==1.14.5 pandas==1.1.2 Binderise your project by following the instructions via mybinder.org "],["6-3-archiving.html", "6.3 Archiving", " 6.3 Archiving 6.3.1 Video vembedr::embed_url(&quot;https://vimeo.com/463947879&quot;) 6.3.2 Slides knitr::include_url(&quot;../slides/slides_reproducibility.html#7&quot;) 6.3.3 Exercise (optional) Follow the workflow outlined in this guide to archive your code to Zenodo. Use the Sandbox version of Zenodo to make sure your repository is not actually archived permanently! "]]
